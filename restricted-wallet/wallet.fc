;; Restricted wallet which allow only validate and withdraw wallet to
;; predefined wallet

int err::wrong_signature() asm "31 PUSHINT";
int err::wrong_seqno() asm "34 PUSHINT";
int err::wrong_subwallet_id() asm "35 PUSHINT";
int err::replay_protection() asm "36 PUSHINT";
int err::wrong_destination() asm "39 PUSHINT";


int is_elector(slice a) inline {
  (int wc, int addr) = parse_std_addr(a);
  return (config_param(1).begin_parse().preload_uint(256) == addr) & (wc == -1);
}

int is_config(slice a) inline {
  (int wc, int addr) = parse_std_addr(a);
  return (config_param(0).begin_parse().preload_uint(256) == addr) & (wc == -1);
}

_ check_message_destination(msg, owner) inline_ref {
  var cs = msg.begin_parse();
  var flags = cs~load_uint(4);
  if (flags & 8) {
    ;; external messages are not valid
    return 0;
  }
  var (s_addr, d_addr) = (cs~load_msg_addr(), cs~load_msg_addr());

  if(equal_slices(d_addr, owner)) {
    return -1;
  }
  var value = cs~load_coins();
  cs~skip_bits(1 + 4 + 4 + 64 + 32);
  if(cs~load_int(1)) {
    return 0;
  }
  int either_body = cs~load_int(1);
  if (either_body) {
    cs = cs~load_ref().begin_parse();
  }
  int op = cs~load_uint(32);
  if(is_config(d_addr)) {
    return op == 0x566f7465;
  }
  if(is_elector(d_addr)) {
    return (op == 0x4e73744b) | (op == 0x47657424) | (op == 0x52674370) | ( op == 0x56744370);
  }
  return 0;
}

_ load_data() {
  var cs = get_data().begin_parse();
  var res = (
    cs~load_uint(32),
    cs~load_uint(32),
    cs~load_uint(256),
    cs~load_msg_addr()
  );
  cs.end_parse();
  return res;
}

_ save_data(int seqno, int subwallet_id, int public_key, slice owner) impure {
  return begin_cell()
    .store_int(seqno, 32)
    .store_int(subwallet_id, 32)
    .store_uint(public_key, 256)
    .store_slice(owner)
    .end_cell().set_data();
}

() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  var (subwallet_id, valid_until, msg_seqno) = (cs~load_uint(32), cs~load_uint(32), cs~load_uint(32));
  throw_if(err::replay_protection(), valid_until <= now());
  var (stored_seqno, stored_subwallet, public_key, owner) = load_data();
  throw_unless(err::wrong_seqno(), msg_seqno == stored_seqno);
  throw_unless(err::wrong_subwallet_id(), subwallet_id == stored_subwallet);
  throw_unless(err::wrong_signature(), check_signature(slice_hash(in_msg), signature, public_key));
  cs~touch();
  while (cs.slice_refs()) {
    var mode = cs~load_uint(8);
    var msg = cs~load_ref();
    throw_unless(err::wrong_destination(), check_message_destination(msg, owner));
    ;; Allways ignore errors to prevent replay errors
    ;; Forbid contract destruction
    send_raw_message(msg, (mode | 2) & 195);
  }

  save_data(stored_seqno + 1, stored_subwallet, public_key, owner);
  accept_message();
}

() recv_internal() impure {
}

;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

int wallet_id() method_id {
  var ds = get_data().begin_parse();
  ds~load_uint(32);
  return ds.preload_uint(32);
}

int get_public_key() method_id {
  var ds = get_data().begin_parse();
  ds~load_uint(32 + 32);
  return ds.preload_uint(256);
}

